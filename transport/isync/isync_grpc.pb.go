// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package isync

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ISyncClient is the client API for ISync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ISyncClient interface {
	SyncAgentState(ctx context.Context, opts ...grpc.CallOption) (ISync_SyncAgentStateClient, error)
	GetAgentState(ctx context.Context, in *AgentStateRequest, opts ...grpc.CallOption) (*AgentStateResponse, error)
	SendMsgToAppHub(ctx context.Context, in *AppHubRequest, opts ...grpc.CallOption) (*AppHubResponse, error)
	SendMsgToIthing(ctx context.Context, opts ...grpc.CallOption) (ISync_SendMsgToIthingClient, error)
}

type iSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewISyncClient(cc grpc.ClientConnInterface) ISyncClient {
	return &iSyncClient{cc}
}

func (c *iSyncClient) SyncAgentState(ctx context.Context, opts ...grpc.CallOption) (ISync_SyncAgentStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISync_ServiceDesc.Streams[0], "/isync.ISync/syncAgentState", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSyncSyncAgentStateClient{stream}
	return x, nil
}

type ISync_SyncAgentStateClient interface {
	Send(*Response) error
	Recv() (*ReportAgentState, error)
	grpc.ClientStream
}

type iSyncSyncAgentStateClient struct {
	grpc.ClientStream
}

func (x *iSyncSyncAgentStateClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iSyncSyncAgentStateClient) Recv() (*ReportAgentState, error) {
	m := new(ReportAgentState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iSyncClient) GetAgentState(ctx context.Context, in *AgentStateRequest, opts ...grpc.CallOption) (*AgentStateResponse, error) {
	out := new(AgentStateResponse)
	err := c.cc.Invoke(ctx, "/isync.ISync/getAgentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iSyncClient) SendMsgToAppHub(ctx context.Context, in *AppHubRequest, opts ...grpc.CallOption) (*AppHubResponse, error) {
	out := new(AppHubResponse)
	err := c.cc.Invoke(ctx, "/isync.ISync/sendMsgToAppHub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iSyncClient) SendMsgToIthing(ctx context.Context, opts ...grpc.CallOption) (ISync_SendMsgToIthingClient, error) {
	stream, err := c.cc.NewStream(ctx, &ISync_ServiceDesc.Streams[1], "/isync.ISync/sendMsgToIthing", opts...)
	if err != nil {
		return nil, err
	}
	x := &iSyncSendMsgToIthingClient{stream}
	return x, nil
}

type ISync_SendMsgToIthingClient interface {
	Send(*Response) error
	Recv() (*AppHubRequest, error)
	grpc.ClientStream
}

type iSyncSendMsgToIthingClient struct {
	grpc.ClientStream
}

func (x *iSyncSendMsgToIthingClient) Send(m *Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iSyncSendMsgToIthingClient) Recv() (*AppHubRequest, error) {
	m := new(AppHubRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ISyncServer is the server API for ISync service.
// All implementations must embed UnimplementedISyncServer
// for forward compatibility
type ISyncServer interface {
	SyncAgentState(ISync_SyncAgentStateServer) error
	GetAgentState(context.Context, *AgentStateRequest) (*AgentStateResponse, error)
	SendMsgToAppHub(context.Context, *AppHubRequest) (*AppHubResponse, error)
	SendMsgToIthing(ISync_SendMsgToIthingServer) error
	mustEmbedUnimplementedISyncServer()
}

// UnimplementedISyncServer must be embedded to have forward compatible implementations.
type UnimplementedISyncServer struct {
}

func (UnimplementedISyncServer) SyncAgentState(ISync_SyncAgentStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncAgentState not implemented")
}
func (UnimplementedISyncServer) GetAgentState(context.Context, *AgentStateRequest) (*AgentStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentState not implemented")
}
func (UnimplementedISyncServer) SendMsgToAppHub(context.Context, *AppHubRequest) (*AppHubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgToAppHub not implemented")
}
func (UnimplementedISyncServer) SendMsgToIthing(ISync_SendMsgToIthingServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMsgToIthing not implemented")
}
func (UnimplementedISyncServer) mustEmbedUnimplementedISyncServer() {}

// UnsafeISyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ISyncServer will
// result in compilation errors.
type UnsafeISyncServer interface {
	mustEmbedUnimplementedISyncServer()
}

func RegisterISyncServer(s grpc.ServiceRegistrar, srv ISyncServer) {
	s.RegisterService(&ISync_ServiceDesc, srv)
}

func _ISync_SyncAgentState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ISyncServer).SyncAgentState(&iSyncSyncAgentStateServer{stream})
}

type ISync_SyncAgentStateServer interface {
	Send(*ReportAgentState) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iSyncSyncAgentStateServer struct {
	grpc.ServerStream
}

func (x *iSyncSyncAgentStateServer) Send(m *ReportAgentState) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iSyncSyncAgentStateServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ISync_GetAgentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISyncServer).GetAgentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isync.ISync/getAgentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISyncServer).GetAgentState(ctx, req.(*AgentStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ISync_SendMsgToAppHub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppHubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ISyncServer).SendMsgToAppHub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isync.ISync/sendMsgToAppHub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ISyncServer).SendMsgToAppHub(ctx, req.(*AppHubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ISync_SendMsgToIthing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ISyncServer).SendMsgToIthing(&iSyncSendMsgToIthingServer{stream})
}

type ISync_SendMsgToIthingServer interface {
	Send(*AppHubRequest) error
	Recv() (*Response, error)
	grpc.ServerStream
}

type iSyncSendMsgToIthingServer struct {
	grpc.ServerStream
}

func (x *iSyncSendMsgToIthingServer) Send(m *AppHubRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iSyncSendMsgToIthingServer) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ISync_ServiceDesc is the grpc.ServiceDesc for ISync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ISync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isync.ISync",
	HandlerType: (*ISyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getAgentState",
			Handler:    _ISync_GetAgentState_Handler,
		},
		{
			MethodName: "sendMsgToAppHub",
			Handler:    _ISync_SendMsgToAppHub_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "syncAgentState",
			Handler:       _ISync_SyncAgentState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "sendMsgToIthing",
			Handler:       _ISync_SendMsgToIthing_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "isync.proto",
}
